Authored By: Mohammad Khayyo 
Exercise Name: Event-Driven Chat Server
Submit Files: chatServer.c, README


Files information: 
•	“chatServer.c”: this file will implement a simulator of group chat ,in which one of the clients write and all other clients read the message using the help of 'select' function.  
•	“README”: file that contain a description of the code and the functions that been used aiming to generate an event driven chat server. 
Main/Helping Functions:   
stract:
====================================
/*
 * Data structure to keep track of active client connections.
 */
typedef struct conn_pool {
    /* Largest file descriptor in this pool. */
    int maxfd;
    /* Number of ready descriptors returned by select. */
    int nready;
    /* Set of all active descriptors for reading. */
    fd_set read_set;
    /* Subset of descriptors ready for reading. */
    fd_set ready_read_set;
    /* Set of all active descriptors for writing. */
    fd_set write_set;
    /* Subset of descriptors ready for writing.  */
    fd_set ready_write_set;
    /* Doubly-linked list of active client connection objects. */
    struct conn *conn_head;
    /* Number of active client connections. */
    unsigned int nr_conns;

}conn_pool_t;
=======================================
/*
 * Data structure to keep track of messages. Each message object holds one
 * complete line of message from a client.
 *
 * The message objects are maintained per connection in a doubly-linked list.
 * When a message is read from one connection, it is added to the list of all othe rconnections.
 *
 * A message is added to the list only when a complete line has been read from
 * the client.
 */
typedef struct msg {
    /* Points to the previous message object in the doubly-linked list. */
    struct msg *prev;
    /* Points to the next message object in the doubly-linked list. */
    struct msg *next;
    /* Points to a dynamically allocated buffer holding the message. */
    char *message;
    /* Size of the message. */
    int size;
}msg_t;
========================================
/*
 * Data structure to keep track of client connection state.
 *
 * The connection objects are also maintained in a global doubly-linked list.
 * There is a dummy connection head at the beginning of the list.
 */
typedef struct conn {
    /* Points to the previous connection object in the doubly-linked list. */
    struct conn *prev;
    /* Points to the next connection object in the doubly-linked list. */
    struct conn *next;
    /* File descriptor associated with this connection. */
    int fd;
    /*
     * Pointers for the doubly-linked list of messages that
     * have to be written out on this connection.
     */
    struct msg *write_msg_head;
    struct msg *write_msg_tail;
}conn_t;
===========================================
Main functions: 
1)int init_pool(conn_pool_t* pool): Init the conn_pool_t structure.
2)int add_conn(int sd, conn_pool_t* pool): Add connection when new client connects the server.
3)int remove_conn(int sd, conn_pool_t* pool): Remove connection when a client closes connection, or clean memory if server stops.
4)int add_msg(int sd,char* buffer,int len,conn_pool_t* pool): Add msg to the queues of all connections (except of the origin).
5)int write_to_client(int sd,conn_pool_t* pool): Write msg to client,and free the msg after that.

Helping functions: 
1) void destroy(conn_pool_t* pool): free all the allocation that have been created
2) int Create_server(struct sockaddr_in * my_server, int * FD_Server, int port): the function create the server and setup
3) int StringToInt(char num[]): this method turn the String to int
4) int IsDigits(const char * num): check if the string has only numbers

compiling steps:
compile: gcc -Wall -Wextra -Wvla -std=c99 chatServer.c -o chatServer
run: valgrind --track-origins=yes -s --leak-check=full --show-leak-kinds=all --show-leak-kinds=indirect,reachable ./chatServer <port>
